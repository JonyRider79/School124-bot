import asyncio

import aiohttp
from aiogram import Bot, types, Dispatcher, executor
import yaml
import keyboard as kb
import logging
from bs4 import BeautifulSoup
import pandas as pd
from datetime import date
import sqlite3


with open('config.yml') as fh:
    dictionary_data = yaml.safe_load(fh)
TOKEN = dictionary_data['TOKEN']

logging.basicConfig(level=logging.INFO)

days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
#main_shedule = pd.DataFrame()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

async def get_main_shedule():
    # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞
    async with aiohttp.ClientSession() as session:
        # –¥–µ–ª–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
        async with session.get("http://74207s124.edusite.ru/m147731.xml?ver=29254") as response:  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
            soup = BeautifulSoup(await response.text(), "lxml")
            head = soup.find("tr")
            headers = ["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–£—Ä–æ–∫"]
            for i in head.find_all("td")[2:]:
                headers.append(i.text)
            global main_shedule
            main_shedule = pd.DataFrame(columns=headers)
            # Create a for loop to fill mydata
            for j in soup.find_all("tr")[1:]:
                row_data = j.find_all("td")
                row = [i.text for i in row_data]
                if len(row) < len(headers):
                    row.insert(0, main_shedule.loc[len(main_shedule)-1,"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"])
                    if (row[1]=="\xa0"):
                        row[1] = row[13]
                        row[13] = "\xa0"
                elif (row[1]=="\xa0"):
                    row[0] = row[12]
                    row[12] = "\xa0"
                    row[1] = row[13]
                    row[13] = "\xa0"
                main_shedule.loc[len(main_shedule)] = row
            main_shedule.to_sql("main_shedule", con=sqlite3.connect("School124.db"), if_exists='replace')
            main_shedule.set_index("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", inplace=True)
           # return main_shedule



@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')



@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.greet_kb1)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")

@dp.message_handler(commands=['1'])
async def process_command_1(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=kb.inline_kb1)


@dp.message_handler(commands=['All'])
async def process_command_2(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=kb.inline_kb_full)

@dp.message_handler(commands=['raspis'])
async def raspis_from_main_shedule(message: types.Message):
    # –£–∑–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–≤–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
    my_date = date.today()
    if date.weekday(my_date) == 5:
        day1 = days[5]
        day2 = days[0]
    elif date.weekday(my_date) == 6:
        day1 = days[0]
        day2 = days[1]
    else:
        day1 = days[date.weekday(my_date)]
        day2 = days[date.weekday(my_date) + 1]

    df_today = main_shedule.loc[[day1], ["–£—Ä–æ–∫", '6–±']]
    df_tomorrov = main_shedule.loc[[day2], ["–£—Ä–æ–∫", '6–±']]
    str_today = day1 + "\n" + df_today.to_string(index=False) + "\n\n" + day2 + "\n" + df_tomorrov.to_string(
        index=False)
    await message.answer(str_today)


@dp.message_handler()
async def echo_message(msg: types.Message):
    #await bot.send_message(msg.from_user.id, msg.text)
    await msg.answer(msg.text)



async def main():
    await get_main_shedule()
    await dp.start_polling(bot)
    #executor.start_polling(dp)


if __name__ == "__main__":
    asyncio.run(main())



